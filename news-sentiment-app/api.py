# -*- coding: utf-8 -*-
"""api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1upXUN71PLCxi-Q5s28_jU3oTjJVL7cH1
"""

import os
print(os.getcwd())

# Create a utils directory if it doesn't exist
import os
if not os.path.exists('/content/utils'):
    os.makedirs('/content/utils')

# Move the uploaded files to the utils directory
import shutil

# Assuming the files are in the current directory
shutil.move('utils_text_to_speech.py', '/content/utils/utils_text_to_speech.py')
shutil.move('utils_gemini_service.py', '/content/utils/utils_gemini_service.py')
shutil.move('utils_news_scraper.py', '/content/utils/utils_news_scraper.py')

import os
# List files in the /content/utils directory
os.listdir('/content/utils')

from utils.utils_text_to_speech import *  # Import all functions from utils_text_to_speech.py
from utils.utils_news_scraper import get_news_articles  # Import the function from utils_news_scraper.py
from utils.utils_gemini_service import *  # Import all functions from utils_gemini_service.py

from fastapi import FastAPI, HTTPException
import gradio as gr
from utils.news_scraper import get_news_articles
from utils.gemini_service import process_articles
from utils.text_to_speech import TextToSpeech

# Initialize FastAPI App
app = FastAPI()
tts = TextToSpeech()

@app.post("/analyze")
async def analyze_news(company: str):
    """Fetches news, summarizes articles, analyzes sentiment, and generates Hindi audio"""
    articles = get_news_articles(company)
    if not articles:
        raise HTTPException(status_code=404, detail="No news articles found.")

    # Process articles (Summarization + Sentiment)
    processed_articles = process_articles(company, articles)

    # Combine summaries for TTS
    full_summary = "\n\n".join([f"{idx+1}. {article['Summary']}" for idx, article in enumerate(processed_articles)])

    # Generate Hindi speech
    audio_path = tts.text_to_speech(full_summary, f"audio_files/{company}_summary.mp3")

    return {
        "company": company,
        "articles": processed_articles,
        "audio_file": audio_path
    }

### **Gradio Interface**
def analyze_interface(company: str):
    """Gradio interface to analyze news"""
    try:
        response = analyze_news(company)
        articles = response["articles"]
        summary = "\n".join([f"{idx+1}. {article['Summary']}" for idx, article in enumerate(articles)])
        return summary, response["audio_file"]
    except Exception as e:
        return str(e), None

gr_interface = gr.Interface(
    fn=analyze_interface,
    inputs=gr.Textbox(label="Enter Company Name"),
    outputs=[gr.Textbox(label="Summary"), gr.Audio(label="Hindi Summary")],
    title="News Sentiment Analyzer",
    description="Enter a company name to analyze recent news sentiment and generate a Hindi audio summary."
)

### **Run FastAPI and Gradio Together**
import uvicorn
from threading import Thread

def run_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    thread = Thread(target=run_fastapi)
    thread.start()
    gr_interface.launch(share=True)