# -*- coding: utf-8 -*-
"""utils_text_to_speech.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16tcAP76D-ne-g05C-zYW4gSC5mmFr0Un
"""

from google.colab import files

# Upload multiple files
uploaded = files.upload()

!mkdir -p utils  # Create the 'utils' directory

# Move files into the 'utils' directory

!mv utils_gemini_service.py utils/gemini_service.py
!mv utils_news_scraper.py utils/news_scraper.py

import os
from gtts import gTTS
from utils.news_scraper import get_news_articles  # ‚úÖ Correct
from utils.gemini_service import process_articles  # ‚úÖ Correct

class TextToSpeech:
    def __init__(self, language: str = 'hi'):
        """Initialize TTS with specified language."""
        self.language = language
        self.output_dir = "audio_files"

        # Create output directory if not exists
        os.makedirs(self.output_dir, exist_ok=True)

    def text_to_speech(self, text: str, output_file: str) -> str:
        """Convert text to Hindi speech and save as audio file."""
        try:
            print(f"\nüîä Converting text to Hindi speech...")
            tts = gTTS(text=text, lang=self.language, slow=False)
            tts.save(output_file)
            print(f"‚úÖ Successfully generated audio file: {output_file}")
            return output_file
        except Exception as e:
            print(f"‚ùå Error generating speech: {e}")
            return ""

    def generate_summary_audio(self, company: str) -> str:
        """Fetch news, analyze sentiment, and generate a Hindi audio summary."""
        articles = get_news_articles(company)
        if not articles:
            print(f"‚ùå No articles found for {company}.")
            return ""

        # Process articles (Summarization + Sentiment)
        analysis_results = process_articles(company, articles)

        # Combine summaries to create a longer speech
        full_summary = "\n\n".join([f"{idx+1}. {article['Summary']}" for idx, article in enumerate(analysis_results)])

        # Generate audio output
        output_file = os.path.join(self.output_dir, f"{company}_summary.mp3")
        return self.text_to_speech(full_summary, output_file)

if __name__ == "__main__":
    # Example usage
    tts = TextToSpeech()
    company_name = "Microsoft"  # Change as needed
    audio_path = tts.generate_summary_audio(company_name)

    if audio_path:
        print(f"\nüéß Listen to the generated audio: {audio_path}")
    else:
        print("‚ùå Failed to generate audio.")